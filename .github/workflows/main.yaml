name: CI/CD Pipeline Lacrei Saúde

on:
  push:
    branches:
      - main

permissions:
  contents: read
  id-token: write

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Instalar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Instalar dependências
        run: npm install

      - name: Construir e Testar Imagem Docker
        run: |
          docker build -t lacrei-app-test .
          echo "Testando a aplicação..."
          # Inicia o container em segundo plano.
          docker run -d --rm --name lacrei-app-test -p 3000:3000 lacrei-app-test
          sleep 10 # Dá tempo para a aplicação iniciar.
          # Faz um teste simples na rota /status.
          RESPONSE=$(curl --silent --fail http://localhost:3000/status)
          if [ -z "$RESPONSE" ]; then
            echo "Erro: A rota /status não retornou uma resposta. Teste falhou."
            exit 1
          fi
          if [[ "$RESPONSE" != *"ok"* ]]; then
            echo "Erro: Resposta inesperada de /status. Teste falhou."
            echo "Resposta: $RESPONSE"
            exit 1
          fi
          echo "Teste de sanidade da API /status bem-sucedido!"
          docker stop lacrei-app-test

  deploy_to_staging:
    needs: build_and_test
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar credenciais da AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::828536209625:role/GitHubActionsECSRole
          aws-region: us-east-1

      - name: Login no ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Construir, Taggear e Enviar Imagem para o ECR (Staging)
        id: build-and-push-staging
        env:
          ECR_REPOSITORY: lacrei-saude-staging
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Construir a imagem Docker.
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          # Taggear a imagem para o ECR.
          ECR_IMAGE_URL=${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_IMAGE_URL
          # Enviar a imagem para o ECR.
          docker push $ECR_IMAGE_URL
          # Define a URL da imagem como uma saída da etapa.
          echo "ecr_image_url=$ECR_IMAGE_URL" >> $GITHUB_OUTPUT

      - name: Adicionando nova imagem no Amazon ECS task definition
        id: task-definition-staging
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-staging.json
          container-name: lacrei-saude-app
          image: ${{ steps.build-and-push-staging.outputs.ecr_image_url }}


      - name: Deploy para o ECS (Staging)
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-definition-staging.outputs.task-definition }}
          service: 'lacrei-saude-staging'
          cluster: 'lacrei-saude-staging'
          wait-for-service-stability: true

  deploy_to_production:
    needs: deploy_to_staging
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://api.lacreisaude.com.br
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar credenciais da AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::828536209625:role/GitHubActionsECSRole
          aws-region: us-east-1

      - name: Login no ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Construir, Taggear e Enviar Imagem para o ECR (Produção)
        id: build-and-push-prod
        env:
          ECR_REPOSITORY: lacrei-saude-prod
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          ECR_IMAGE_URL=${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_IMAGE_URL
          docker push $ECR_IMAGE_URL
          echo "ecr_image_url=$ECR_IMAGE_URL" >> $GITHUB_OUTPUT

      - name: Registrar nova Task Definition (Production)
        id: register-task-prod
        uses: aws-actions/amazon-ecs-register-task-definition@v1
        with:
          task-definition: task-definition-production.json
          container-name: lacrei-saude-app
          image: ${{ steps.build-and-push-production.outputs.ecr_image_url }}

      - name: Deploy para o ECS (Produção)
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.register-task-production.outputs.task-definition-arn }}
          service: 'lacrei-saude-prod'
          cluster: 'lacrei-saude-prod'
          wait-for-service-stability: true
